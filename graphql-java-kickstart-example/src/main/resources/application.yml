server:
  port: 8081
  http2:
    enabled: true
spring:
  servlet:
    multipart:
      max-file-size: 1MB
  mvc:
    async:
      request-timeout: -1
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s

  cloud:
    openfeign:
      httpclient:
        max-connections-per-route: 20
        max-connections: 200
      client:
        config:
          default:
            loggerLevel: FULL #Possible options: BASIC, FULL, HEADERS, NONE
#            request-interceptors:
#              - com.example.api.config.feign.GlobalFeignRequestInterceptor
            connectTimeout: 100
            readTimeout: 300
#            error-decoder: com.example.api.exception.FeignErrorDecoder
            decode404: true

#feign:
#  httpclient:
#    max-connections-per-route: 20
#    max-connections: 200
#  client:
#    config:
#      default:
#        loggerLevel: FULL #Possible options: BASIC, FULL, HEADERS, NONE
#        decode404: true
#        connectTimeout: 100
#        readTimeout: 300

resilience4j.retry:
  #  retryAspectOrder: 2
  metrics:
    enabled: true
  configs:
    default:
      max-attempts: 2
      waitDuration: 20
#      failAfterMaxAttempts: true
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - feign.RetryableException
        - java.net.SocketTimeoutException
        - java.util.concurrent.CompletionException
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - feign.FeignException.InternalServerError
        - feign.FeignException.BadGateway
        - feign.FeignException.ServiceUnavailable
        - feign.FeignException.GatewayTimeout
        - feign.FeignException.FeignServerException
        - org.apache.hc.client5.http.ConnectTimeoutException
        - org.apache.hc.client5.http.HttpHostConnectException
    defaultHttp:
      maxAttempts: 4
      waitDuration: 10
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - java.net.ConnectException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.reactive.function.client.WebClientResponseException.InternalServerError
        - org.springframework.web.reactive.function.client.WebClientResponseException.ServiceUnavailable
        - org.springframework.web.reactive.function.client.WebClientResponseException.GatewayTimeout
        - org.springframework.web.reactive.function.client.WebClientResponseException.TooManyRequests
  instances:
    unstableService:
      baseConfig: default
    unstableServiceSync:
      baseConfig: default
    unstableServiceHttp:
      baseConfig: defaultHttp
    unstableServiceHttpSync:
      baseConfig: defaultHttp


#  security:
#    user:
#      name: admin
#      password: admin
#      roles: manager

graphql:
  servlet:
    max-query-depth: 20
    # Enable exception handlers
    exception-handlers-enabled: true

    tracing-enabled: false # Habilita/Deshabilita las trazas de graphQL
  # Defined extended scalars
  extended-scalars: BigDecimal, Date, Url

  playground:
    enabled: true
    #    headers:
    #      Authorization: Bearer TOKEN # Possible options: Bearer TOKEN | Basic Token
    #      user_id: admin
    #      user_roles: ADMIN
    tabs:
      - name: User
        query: classpath:playground/user.graphql
        variables: classpath:playground/user_variables.json
        headers:
          SomeHeader: Some value
        responses:
          - classpath:playground/responses/GET_USER_BY_ID.json
      - name: Post
        query: classpath:playground/post.graphql
        variables: classpath:playground/post_variables.json
        headers:
          Accept: application/json
          Other-Header: Other Value
      - name: Comment
        query: classpath:playground/comment.graphql
        variables: classpath:playground/comment_variables.json
        responses:
          - classpath:playground/responses/allCommentsResponse.json
          - classpath:playground/responses/commentByIdResponse.json
        headers:
          CorrelationId: bfe09b05-ec5c-4d18-8ea4-566718f19769
      - name: Product
        query: classpath:playground/product.graphql

    page-title: Nacho's Playground
    endpoint: /graphql
    mapping: /personaQL
    settings:
      editor.reuseHeaders: true # new tab reuses headers from last tab
      request.credentials: include # possible values: 'omit', 'include', 'same-origin' includes the credentials headers in the requests

voyager:
  enabled: true

logging:
  level:
    root: info
    com.example.api.client: debug
  pattern:
    console: -%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %clr(%X{CorrelationId}){red} %m%n%wEx

management:
  endpoints:
    web:
      exposure:
        include: "*"

#producer:
#  url: http://localhost:8082

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: /graphql.*
      strategy: first
      filter-order: 1 # Set it to a number higher then zero to execute it after e.g. Spring Security.
      http-response-body: "{ \"errors\":{ \"status\": 429, \"message\": \"Too Many Requests\", \"extensions\": { \"classification\": \"TOO_MANY_REQUEST\" },  \"path\": \"/graphql\" } }"
      rate-limits:
        - expression: "getHeader('Origin-System-Id')"
          execute-condition: "'user'.equals(getHeader('Origin-System-Id'))"
          bandwidths:
            - capacity: 3
              time: 1
              unit: minutes
        - expression: "getHeader('Origin-System-Id')"
          execute-condition: "'manager'.equals(getHeader('Origin-System-Id'))"
          bandwidths:
            - capacity: 10
              time: 1
              unit: minutes
        - expression: "getHeader('Origin-System-Id')"
          execute-condition: "'admin'.equals(getHeader('Origin-System-Id'))"
          bandwidths:
            - capacity: 10
              time: 1
              unit: minutes
#        - expression: "@securityService.username() != null ? @securityService.username() : 'anonym'"
#          execute-condition: "'user'.equals(@securityService.username())"
#          bandwidths:
#            - capacity: 3
#              time: 1
#              unit: minutes
#        - expression: "@securityService.username() != null ? @securityService.username() : 'anonym'"
#          execute-condition: "'manager'.equals(@securityService.username())"
#          bandwidths:
#            - capacity: 10
#              time: 1
#              unit: minutes
#        - expression: "@securityService.username() != null ? @securityService.username() : 'anonym'"
#          execute-condition: "'admin'.equals(@securityService.username())"
#          bandwidths:
#            - capacity: 1000
#              time: 1
#              unit: minutes

management.endpoint.health.show-details: always
management.endpoints.web.exposure.include: health,info,circuitbreakers,circuitbreakerevents,retries,retryevents
management.health.retries.enabled: true